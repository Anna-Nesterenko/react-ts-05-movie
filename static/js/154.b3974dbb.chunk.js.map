{"version":3,"file":"static/js/154.b3974dbb.chunk.js","mappings":"8JAEaA,E,QAAgBC,GAAAA,IAAH,+C,SCCbC,EAAS,WACpB,OACE,SAACF,EAAD,WACE,SAAC,KAAD,CACEG,YAAY,OACZC,YAAY,IACZC,MAAM,KACNC,kBAAkB,SAIzB,C,iOCZYC,EAAiBN,EAAAA,GAAAA,GAAH,wRAadO,EAASP,EAAAA,GAAAA,GAAH,kQASNQ,EAAUR,EAAAA,GAAAA,IAAH,+EAMPS,EAAYT,EAAAA,GAAAA,GAAH,sF,SCvBTU,EAAW,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,MAEzB,OACE,SAACL,EAAD,UACGK,EAAMC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,KAArB,OACT,UAACR,EAAD,WACGO,GACC,SAACN,EAAD,CACEQ,IAAG,yCAAoCF,GACvCG,IAAKF,KAGP,SAACP,EAAD,CAASQ,IAAKE,EAAWD,IAAKF,KAEhC,SAACN,EAAD,UAAYM,MATDF,EADJ,KAehB,ECrBYM,EAAW,WACtB,MCFiC,WACjC,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QAER,GAA0BE,EAAAA,EAAAA,UAAsC,IAAhE,eAAOX,EAAP,KAAcY,EAAd,KACA,GAA0BD,EAAAA,EAAAA,UAAqB,MAA/C,eAAOE,EAAP,KAAcC,EAAd,KACA,GAA8BH,EAAAA,EAAAA,WAAkB,GAAhD,eAAOI,EAAP,KAAgBC,EAAhB,KAmBA,OAjBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAgB,yCAAG,gGACvBF,GAAW,GADY,mBAGFG,EAAAA,EAAAA,IAAeV,GAHb,OAGfW,EAHe,OAKrBR,EAASQ,EAAKC,MALO,gDAOrBP,EAAS,EAAD,IAPa,yBAUrBE,GAAW,GAVU,4EAAH,qDActBE,GACD,GAAE,CAACT,IACG,CAAET,MAAAA,EAAOe,QAAAA,EAASF,MAAAA,EAC1B,CDvBmCS,GAA1BtB,EAAR,EAAQA,MAAOe,EAAf,EAAeA,QAASF,EAAxB,EAAwBA,MAExB,OACE,+BACIA,IACA,UAACU,EAAD,WACGR,IAAW,SAACzB,EAAA,EAAD,IACM,IAAjBU,EAAMwB,QACL,SAACzB,EAAD,CAAUC,MAAOA,KAEjB,8CAMX,EAEKuB,EAAclC,EAAAA,GAAAA,IAAH,4E,mMEtBXoC,EAAU,mCAChBC,IAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAiB,yCAAG,2GACRD,IAAAA,IAAA,qCAAwCD,IADhC,uBACvBL,EADuB,EACvBA,KADuB,kBAExBA,GAFwB,2CAAH,qDAKjBQ,EAAe,yCAAG,WAAOC,GAAP,8FACNH,IAAAA,IAAA,+BACGD,EADH,kBACoBI,EADpB,yBADM,uBACrBT,EADqB,EACrBA,KADqB,kBAItBA,GAJsB,2CAAH,sDAOfU,EAAmB,yCAAG,WAAO5B,GAAP,8FACVwB,IAAAA,IAAA,gBAAmBxB,EAAnB,oBAAiCuB,IADvB,uBACzBL,EADyB,EACzBA,KADyB,kBAE1BA,GAF0B,2CAAH,sDAKnBD,EAAc,yCAAG,WAAOjB,GAAP,8FACLwB,IAAAA,IAAA,gBAAmBxB,EAAnB,4BAAyCuB,IADpC,uBACpBL,EADoB,EACpBA,KADoB,kBAErBA,GAFqB,2CAAH,sDAKdW,EAAiB,yCAAG,WAAO7B,GAAP,8FACRwB,IAAAA,IAAA,gBAAmBxB,EAAnB,4BAAyCuB,IADjC,uBACvBL,EADuB,EACvBA,KADuB,kBAExBA,GAFwB,2CAAH,qD","sources":["components/Loader/Loader.styled.js","components/Loader/Loader.tsx","components/CastList/CastList.styled.js","components/CastList/CastList.tsx","pages/CastPage/CastPage.tsx","hooks/useFetchMovieByCast.ts","services/services.ts"],"sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const WrapperLoader = styled.div`\r\n  text-align: center;\r\n`;\r\n","import { RotatingLines } from \"react-loader-spinner\";\r\nimport { WrapperLoader } from \"./Loader.styled\";\r\n\r\nexport const Loader = () => {\r\n  return (\r\n    <WrapperLoader>\r\n      <RotatingLines\r\n        strokeColor=\"grey\"\r\n        strokeWidth=\"4\"\r\n        width=\"80\"\r\n        animationDuration=\"1.2\"\r\n      />\r\n    </WrapperLoader>\r\n  );\r\n};\r\n","import styled from 'styled-components';\r\n\r\nexport const CastListStyled = styled.ul`\r\n  display: grid;\r\n  max-width: calc(100vw - 48px);\r\n  grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));\r\n  grid-gap: 15px;\r\n  margin-top: 0;\r\n  margin-bottom: 0;\r\n  padding: 0;\r\n  list-style: none;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`;\r\n\r\nexport const CastEl = styled.li`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  border-radius: 2px;\r\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\r\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\r\n`;\r\n\r\nexport const CastImg = styled.img`\r\n  width: 100%;\r\n  height: auto;\r\n  object-fit: cover;\r\n`;\r\n\r\nexport const CastTitle = styled.h3`\r\n  padding: 5px;\r\n  font-weight: bold;\r\n  text-align: center;\r\n`;\r\n","import noUserImg from \"../../images/no-user.jpg\";\r\nimport { CastEl, CastImg, CastTitle, CastListStyled } from \"./CastList.styled\";\r\n\r\ninterface IProps {\r\n  casts: { [key: string]: string }[];\r\n}\r\n\r\nexport const CastList = ({ casts }: IProps) => {\r\n  //   console.log('casts', casts);\r\n  return (\r\n    <CastListStyled>\r\n      {casts.map(({ id, profile_path, name }) => (\r\n        <CastEl key={id}>\r\n          {profile_path ? (\r\n            <CastImg\r\n              src={`https://image.tmdb.org/t/p/w185${profile_path}`}\r\n              alt={name}\r\n            />\r\n          ) : (\r\n            <CastImg src={noUserImg} alt={name} />\r\n          )}\r\n          <CastTitle>{name}</CastTitle>\r\n        </CastEl>\r\n      ))}\r\n    </CastListStyled>\r\n  );\r\n};\r\n","import { useFetchMovieByCast } from \"../../hooks/useFetchMovieByCast\";\r\nimport { Loader } from \"../../components/Loader/Loader\";\r\nimport { CastList } from \"../../components/CastList/CastList\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const CastPage = () => {\r\n  const { casts, loading, error } = useFetchMovieByCast();\r\n\r\n  return (\r\n    <>\r\n      {!error && (\r\n        <WrapperPage>\r\n          {loading && <Loader />}\r\n          {casts.length !== 0 ? (\r\n            <CastList casts={casts} />\r\n          ) : (\r\n            <p>No information</p>\r\n          )}\r\n        </WrapperPage>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst WrapperPage = styled.div`\r\n  border-top: 6px double #004747;\r\n  padding: 15px;\r\n`;\r\n","import { useState, useEffect } from \"react\";\r\nimport { getMovieByCast } from \"../services/services\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nexport const useFetchMovieByCast = () => {\r\n  const { movieId } = useParams();\r\n\r\n  const [casts, setCasts] = useState<{ [key: string]: string }[]>([]);\r\n  const [error, setError] = useState<any | null>(null);\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    const fetchMovieByCast = async () => {\r\n      setLoading(true);\r\n      try {\r\n        const data = await getMovieByCast(movieId);\r\n\r\n        setCasts(data.cast);\r\n      } catch (error) {\r\n        setError(error);\r\n        //   toast.error(`Not Found`);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchMovieByCast();\r\n  }, [movieId]);\r\n  return { casts, loading, error };\r\n};\r\n","import axios from \"axios\";\r\n\r\nconst API_KEY = \"833791a5e754a1f0443be5fc62646bdb\";\r\naxios.defaults.baseURL = \"https://api.themoviedb.org/3/\";\r\n\r\nexport const getTrendingMovies = async () => {\r\n  const { data } = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\r\n  return data;\r\n};\r\n\r\nexport const getSearchMovies = async (searchQuery: string) => {\r\n  const { data } = await axios.get(\r\n    `search/movie?api_key=${API_KEY}&query=${searchQuery}&include_adult=false`\r\n  );\r\n  return data;\r\n};\r\n\r\nexport const getMovieDetailsById = async (id: string | undefined) => {\r\n  const { data } = await axios.get(`movie/${id}?api_key=${API_KEY}`);\r\n  return data;\r\n};\r\n\r\nexport const getMovieByCast = async (id: string | undefined) => {\r\n  const { data } = await axios.get(`movie/${id}/credits?api_key=${API_KEY}`);\r\n  return data;\r\n};\r\n\r\nexport const getMovieByReviews = async (id: string | undefined) => {\r\n  const { data } = await axios.get(`movie/${id}/reviews?api_key=${API_KEY}`);\r\n  return data;\r\n};\r\n"],"names":["WrapperLoader","styled","Loader","strokeColor","strokeWidth","width","animationDuration","CastListStyled","CastEl","CastImg","CastTitle","CastList","casts","map","id","profile_path","name","src","alt","noUserImg","CastPage","movieId","useParams","useState","setCasts","error","setError","loading","setLoading","useEffect","fetchMovieByCast","getMovieByCast","data","cast","useFetchMovieByCast","WrapperPage","length","API_KEY","axios","getTrendingMovies","getSearchMovies","searchQuery","getMovieDetailsById","getMovieByReviews"],"sourceRoot":""}