{"version":3,"file":"static/js/493.c1f42160.chunk.js","mappings":"8JAEaA,E,QAAgBC,GAAAA,IAAH,+C,SCCbC,EAAS,WACpB,OACE,SAACF,EAAD,WACE,SAAC,KAAD,CACEG,YAAY,OACZC,YAAY,IACZC,MAAM,KACNC,kBAAkB,SAIzB,C,0GCVYC,EAAc,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,QAE5B,OACE,wBACGA,EAAQC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACX,2BACE,gBAAIC,MAAO,CAAEC,aAAc,OAA3B,qCAC2BH,EAD3B,MACsC,QAGtC,cAAGE,MAAO,CAAEC,aAAc,QAA1B,SAAqCF,MAL9BF,EADE,KAWlB,E,qECdYK,EAAc,WACzB,MCFkC,WAClC,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QAER,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOV,EAAP,KAAgBW,EAAhB,KACD,GAA0BD,EAAAA,EAAAA,UAAqB,MAA/C,eAAOE,EAAP,KAAcC,EAAd,KACA,GAA8BH,EAAAA,EAAAA,WAAkB,GAAhD,eAAOI,EAAP,KAAgBC,EAAhB,KAoBC,OAlBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAmB,yCAAG,gGAC1BF,GAAW,GADe,mBAGLG,EAAAA,EAAAA,IAAkBV,GAHb,OAGlBW,EAHkB,OAKxBR,EAAWQ,EAAKC,SALQ,gDAOxBP,EAAS,EAAD,IAPgB,yBAUxBE,GAAW,GAVa,4EAAH,qDAczBE,GACD,GAAE,CAACT,IAEG,CAAER,QAAAA,EAASc,QAAAA,EAASF,MAAAA,EAC5B,CDxBqCS,GAA5BrB,EAAR,EAAQA,QAASc,EAAjB,EAAiBA,QAASF,EAA1B,EAA0BA,MAE1B,OACE,+BACIA,IACA,UAACU,EAAD,WACGR,IAAW,SAACpB,EAAA,EAAD,IACQ,IAAnBM,EAAQuB,QACP,SAACxB,EAAD,CAAaC,QAASA,KAEtB,8CAMX,EAEKsB,EAAc7B,EAAAA,GAAAA,IAAH,4E,mMEtBX+B,EAAU,mCAChBC,IAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAiB,yCAAG,2GACRD,IAAAA,IAAA,qCAAwCD,IADhC,uBACvBL,EADuB,EACvBA,KADuB,kBAExBA,GAFwB,2CAAH,qDAKjBQ,EAAe,yCAAG,WAAOC,GAAP,8FACNH,IAAAA,IAAA,+BACGD,EADH,kBACoBI,EADpB,yBADM,uBACrBT,EADqB,EACrBA,KADqB,kBAItBA,GAJsB,2CAAH,sDAOfU,EAAmB,yCAAG,WAAO3B,GAAP,8FACVuB,IAAAA,IAAA,gBAAmBvB,EAAnB,oBAAiCsB,IADvB,uBACzBL,EADyB,EACzBA,KADyB,kBAE1BA,GAF0B,2CAAH,sDAKnBW,EAAc,yCAAG,WAAO5B,GAAP,8FACLuB,IAAAA,IAAA,gBAAmBvB,EAAnB,4BAAyCsB,IADpC,uBACpBL,EADoB,EACpBA,KADoB,kBAErBA,GAFqB,2CAAH,sDAKdD,EAAiB,yCAAG,WAAOhB,GAAP,8FACRuB,IAAAA,IAAA,gBAAmBvB,EAAnB,4BAAyCsB,IADjC,uBACvBL,EADuB,EACvBA,KADuB,kBAExBA,GAFwB,2CAAH,qD","sources":["components/Loader/Loader.styled.js","components/Loader/Loader.tsx","components/ReviewsList/ReviewsList.tsx","pages/ReviewsPage/ReviewsPage.tsx","hooks/useFetchMovieReviews.ts","services/services.ts"],"sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const WrapperLoader = styled.div`\r\n  text-align: center;\r\n`;\r\n","import { RotatingLines } from \"react-loader-spinner\";\r\nimport { WrapperLoader } from \"./Loader.styled\";\r\n\r\nexport const Loader = () => {\r\n  return (\r\n    <WrapperLoader>\r\n      <RotatingLines\r\n        strokeColor=\"grey\"\r\n        strokeWidth=\"4\"\r\n        width=\"80\"\r\n        animationDuration=\"1.2\"\r\n      />\r\n    </WrapperLoader>\r\n  );\r\n};\r\n","interface IProps {\r\n  reviews: { [key: string]: string }[];\r\n}\r\n\r\nexport const ReviewsList = ({ reviews }: IProps) => {\r\n  //   console.log('reviews :>> ', reviews);\r\n  return (\r\n    <ul>\r\n      {reviews.map(({ id, author, content }) => (\r\n        <li key={id}>\r\n          <h4 style={{ marginBottom: \"5px\" }}>\r\n            Reviewed by the author \"{author}\" :{\" \"}\r\n          </h4>\r\n\r\n          <p style={{ marginBottom: \"10px\" }}>{content}</p>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n","import { Loader } from \"../../components/Loader/Loader\";\r\nimport { ReviewsList } from \"../../components/ReviewsList/ReviewsList\";\r\nimport { useFetchMovieReviews } from \"../../hooks/useFetchMovieReviews\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const ReviewsPage = () => {\r\n  const { reviews, loading, error } = useFetchMovieReviews();\r\n\r\n  return (\r\n    <>\r\n      {!error && (\r\n        <WrapperPage>\r\n          {loading && <Loader />}\r\n          {reviews.length !== 0 ? (\r\n            <ReviewsList reviews={reviews} />\r\n          ) : (\r\n            <p>No information</p>\r\n          )}\r\n        </WrapperPage>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst WrapperPage = styled.div`\r\n  border-top: 6px double #004747;\r\n  padding: 15px;\r\n`;\r\n","import { useState, useEffect } from \"react\";\r\nimport { getMovieByReviews } from \"../services/services\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nexport const useFetchMovieReviews = () => {\r\n  const { movieId } = useParams();\r\n\r\n  const [reviews, setReviews] = useState([]);\r\n const [error, setError] = useState<any | null>(null);\r\n const [loading, setLoading] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    const fetchMovieByReviews = async () => {\r\n      setLoading(true);\r\n      try {\r\n        const data = await getMovieByReviews(movieId);\r\n\r\n        setReviews(data.results);\r\n      } catch (error) {\r\n        setError(error);\r\n        //   toast.error(`Not Found`);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchMovieByReviews();\r\n  }, [movieId]);\r\n\r\n  return { reviews, loading, error };\r\n};\r\n","import axios from \"axios\";\r\n\r\nconst API_KEY = \"833791a5e754a1f0443be5fc62646bdb\";\r\naxios.defaults.baseURL = \"https://api.themoviedb.org/3/\";\r\n\r\nexport const getTrendingMovies = async () => {\r\n  const { data } = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\r\n  return data;\r\n};\r\n\r\nexport const getSearchMovies = async (searchQuery: string) => {\r\n  const { data } = await axios.get(\r\n    `search/movie?api_key=${API_KEY}&query=${searchQuery}&include_adult=false`\r\n  );\r\n  return data;\r\n};\r\n\r\nexport const getMovieDetailsById = async (id: string | undefined) => {\r\n  const { data } = await axios.get(`movie/${id}?api_key=${API_KEY}`);\r\n  return data;\r\n};\r\n\r\nexport const getMovieByCast = async (id: string | undefined) => {\r\n  const { data } = await axios.get(`movie/${id}/credits?api_key=${API_KEY}`);\r\n  return data;\r\n};\r\n\r\nexport const getMovieByReviews = async (id: string | undefined) => {\r\n  const { data } = await axios.get(`movie/${id}/reviews?api_key=${API_KEY}`);\r\n  return data;\r\n};\r\n"],"names":["WrapperLoader","styled","Loader","strokeColor","strokeWidth","width","animationDuration","ReviewsList","reviews","map","id","author","content","style","marginBottom","ReviewsPage","movieId","useParams","useState","setReviews","error","setError","loading","setLoading","useEffect","fetchMovieByReviews","getMovieByReviews","data","results","useFetchMovieReviews","WrapperPage","length","API_KEY","axios","getTrendingMovies","getSearchMovies","searchQuery","getMovieDetailsById","getMovieByCast"],"sourceRoot":""}